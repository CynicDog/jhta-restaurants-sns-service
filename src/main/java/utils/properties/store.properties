StoreDao.updateStore=update STORES set STORE_NAME = ?, STORE_BUSINESS_LICENSE_NUMBER = ?, STORE_ADDRESS = ?, STORE_ZIPCODE = ?, STORE_LATITUDE = ?, STORE_LONGITUDE = ?, STORE_TEXT = ?, STORE_PHONE = ?, STORE_DAYOFFS = ?, OWNER_ID = ? where ID = ?
StoreDao.getStoreById=select * from stores where ID = ?
StoreDao.deleteStoreById=delete from stores where ID = ? 
StoreDao.deleteStoreByName=delete from stores where STORE_NAME = ? 
StoreDao.getStoreByName=select * from stores where STORE_NAME = ?
StoreDao.insertStore=insert into stores (ID, STORE_NAME, STORE_BUSINESS_LICENSE_NUMBER, STORE_ADDRESS, STORE_ZIPCODE, STORE_LATITUDE, STORE_LONGITUDE, STORE_TEXT, STORE_PHONE, STORE_DAYOFFS, OWNER_ID) values (STORES_SEQUENCE.nextval, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) 
StoreDao.getAllStores=select * from stores 
StoreDao.getStoresByFoodCategory=select * from stores where ID in (select distinct STORE_ID from FOODS where FOOD_CATEGORY = ?)
StoreDao.getStoreByBusinessLicenseNumber=select * from stores where STORE_BUSINESS_LICENSE_NUMBER = ? 
StoreDao.getTotalRows=select count(*) from stores 
StoreDao.getTotalRowsByFoodCategory=select count(*) from (select * from stores where ID in (select distinct STORE_ID from FOODS where FOOD_CATEGORY = ?))
StoreDao.getStoresPaginated=SELECT * FROM (SELECT ROW_NUMBER() OVER (ORDER BY B.REVIEW_AVG DESC) ROW_NUMBER, B.REVIEW_AVG, A.STORE_NAME, A.ID FROM STORES A, (SELECT STORE_ID, AVG(REVIEW_RATING) REVIEW_AVG FROM REVIEWS GROUP BY STORE_ID) B WHERE A.ID = B.STORE_ID) WHERE ROW_NUMBER BETWEEN ? AND ?
StoreDao.getStoresPaginatedByCategory=SELECT * FROM (SELECT ROW_NUMBER() OVER (ORDER BY B.REVIEW_AVG DESC) ROW_NUMBER, B.REVIEW_AVG, A.STORE_NAME, A.ID FROM (select * from stores where ID in (select distinct STORE_ID from FOODS where FOOD_CATEGORY = ?)) A, (SELECT STORE_ID, AVG(REVIEW_RATING) REVIEW_AVG FROM REVIEWS GROUP BY STORE_ID) B WHERE A.ID = B.STORE_ID) WHERE ROW_NUMBER BETWEEN ? AND ?